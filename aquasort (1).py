# -*- coding: utf-8 -*-
"""Aquasort.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17uvzajvMB3UqgrMUN83fEGQw1HCV3ygW
"""

!pip install tensorflow gradio seaborn tqdm

import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model, load_model
from tensorflow.keras.layers import Dense, Dropout, GlobalAveragePooling2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from google.colab import drive
drive.mount('/content/drive')

DATASET_PATH = '/content/drive/MyDrive/archive (2)'
IMG_SIZE = (128, 128)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=25,
    zoom_range=0.2,
    horizontal_flip=True,
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    DATASET_PATH,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_generator = train_datagen.flow_from_directory(
    DATASET_PATH,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)


classes = list(train_generator.class_indices.keys())
print("‚úÖ Classes Detected:", classes)

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(128,128,3))
for layer in base_model.layers:
    layer.trainable = False

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
output = Dense(train_generator.num_classes, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=output)
model.compile(optimizer=Adam(1e-4), loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

callbacks = [
    EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True),
    ReduceLROnPlateau(monitor='val_accuracy', factor=0.5, patience=2, min_lr=1e-6),
    ModelCheckpoint('marine_mobilenetv2.keras', monitor='val_accuracy', save_best_only=True)
]

history = model.fit(
    train_generator,
    validation_data=val_generator,
    steps_per_epoch=50,
    validation_steps=10,
    epochs=5,
    callbacks=callbacks
)

model.save('/content/marine_mobilenetv2.h5')
print("‚úÖ Model saved successfully!")

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.legend()
plt.show()

plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train')
plt.plot(history.history['val_accuracy'], label='Val')
plt.title('Accuracy')
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train')
plt.plot(history.history['val_loss'], label='Val')
plt.title('Loss')
plt.legend()
plt.show()

import sqlite3
conn = sqlite3.connect("marine_alerts.db")
cursor = conn.cursor()

# Add missing columns if not exist
try:
    cursor.execute("ALTER TABLE detections ADD COLUMN depth REAL;")
except:
    pass
try:
    cursor.execute("ALTER TABLE detections ADD COLUMN ocean_health REAL;")
except:
    pass
conn.commit()
conn.close()
print("‚úÖ Database updated with missing columns!")

import gradio as gr
import sqlite3
import random
import datetime
import numpy as np
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from PIL import Image
import os, traceback

# ============================================================
# üåä AquaFusion-X ‚Äî Unified Marine Waste Detection + Alert System
# ============================================================

# ------------------ Database Setup ------------------
def setup_database():
    conn = sqlite3.connect("ocean_cleanup.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS detections (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            waste_type TEXT,
            confidence REAL,
            impact_level TEXT,
            eco_suggestion TEXT,
            carbon_offset REAL,
            location TEXT,
            depth REAL,
            timestamp TEXT,
            alert_sent TEXT
        )
    """)
    conn.commit()
    conn.close()

setup_database()

# ------------------ Model Setup ------------------
MODEL_PATH = "marine_mobilenetv2.keras"
model = None
if os.path.exists(MODEL_PATH):
    try:
        model = tf.keras.models.load_model(MODEL_PATH)
        CLASS_NAMES = ['Plastic', 'Metal', 'Glass', 'Paper', 'Cardboard']
        print("‚úÖ Model loaded successfully.")
    except Exception as e:
        print("‚ö†Ô∏è Model loading failed:", e)
else:
    print("‚ÑπÔ∏è No trained model found ‚Äî running in simulation mode.")

# ------------------ Waste Data ------------------
waste_info = {
    'Plastic': {'impact': 'High', 'decay': '450 years', 'suggestion': 'Recycle into eco-bricks or pyrolysis fuel.', 'carbon': 1.83},
    'Metal': {'impact': 'Medium', 'decay': '50 years', 'suggestion': 'Smelt and reuse via marine-safe alloys.', 'carbon': 0.9},
    'Glass': {'impact': 'Low', 'decay': '1 million years', 'suggestion': 'Recycle or reuse as sand substitute.', 'carbon': 0.4},
    'Paper': {'impact': 'Low', 'decay': '2‚Äì6 weeks', 'suggestion': 'Allow composting or recycle into pulp.', 'carbon': 0.2},
    'Cardboard': {'impact': 'Low', 'decay': '2 months', 'suggestion': 'Recycle into paper products.', 'carbon': 0.3},
    'Organic': {'impact': 'Low', 'decay': '0.5 years', 'suggestion': 'Compost to enrich marine soil.', 'carbon': 0.1}
}

# ------------------ Random Coordinates ------------------
def get_submarine_coordinates():
    return (
        round(random.uniform(-90, 90), 6),
        round(random.uniform(-180, 180), 6),
        round(random.uniform(5, 2000), 2)
    )

# ------------------ Main Analyzer ------------------
def analyze_waste(image_input):
    try:
        # Handle no input
        if image_input is None:
            return "<p style='color:red;'>‚ö†Ô∏è Please upload an image to analyze.</p>"

        latitude, longitude, depth = get_submarine_coordinates()
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # --- If model available ---
        if model:
            img = image_input.resize((128, 128))
            img_array = image.img_to_array(img)
            img_array = np.expand_dims(img_array, axis=0) / 255.0

            preds = model.predict(img_array)[0]
            idx = np.argmax(preds)
            waste_type = CLASS_NAMES[idx]
            confidence = round(float(preds[idx]) * 100, 2)
        else:
            # --- Simulation Mode ---
            waste_type = random.choice(list(waste_info.keys()))
            confidence = round(random.uniform(85, 100), 2)

        info = waste_info[waste_type]
        cleanup_score = round((confidence / 2) + random.uniform(10, 40), 2)
        location = f"Lat: {latitude}, Lon: {longitude}, Depth: {depth} m"

        # --- Store in database ---
        conn = sqlite3.connect("ocean_cleanup.db")
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO detections
            (waste_type, confidence, impact_level, eco_suggestion, carbon_offset, location, depth, timestamp, alert_sent)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            waste_type, confidence, info['impact'], info['suggestion'],
            info['carbon'], location, depth, timestamp, "Yes" if info['impact'] == "High" else "No"
        ))
        conn.commit()
        conn.close()

        # --- Generate Alert Message ---
        alert_message = ""
        if info['impact'] == "High":
            alert_message = (
                f"üì° <b>BOEM ALERT:</b> High-impact debris detected!\n"
                f"üß© Type: {waste_type}\nüìç Location: {location}\nüïí Time: {timestamp}\n"
                f"üö® Notification sent to BOEM and Ocean Cleanup Teams."
            )

        # --- Final Output (Beautifully formatted) ---
        result = f"""
        <div style="font-family:'Poppins',sans-serif; text-align:center;
                    background:linear-gradient(145deg,#0077b6,#00b4d8);
                    padding:25px; border-radius:20px; color:white;
                    box-shadow:0 4px 15px rgba(0,0,0,0.3);">
            <h2>üåä Aquasort ‚Äî Marine Waste Intelligence System</h2>
            <p>üß© <b>Detected Waste:</b> {waste_type}</p>
            <p>üìä <b>Confidence:</b> {confidence}%</p>
            <p>üíÄ <b>Impact Level:</b> {info['impact']}</p>
            <p>‚è≥ <b>Decay Time:</b> {info['decay']}</p>
            <p>‚ôªÔ∏è <b>Eco Suggestion:</b> {info['suggestion']}</p>
            <p>üå± <b>Carbon Offset:</b> {info['carbon']} kg CO‚ÇÇ saved</p>
            <p>üíß <b>Ocean Score:</b> {cleanup_score}/100</p>
            <p>üìç <b>Location:</b> {location}</p>
            <p>üïí <b>Detected At:</b> {timestamp}</p>
            <hr style="border:1px solid #fff; width:60%;">
            <p>üí¨ <b>Awareness Tip:</b> {waste_type} takes {info['decay']} to decompose!</p>
        """

        if alert_message:
            result += f"<pre style='background:#023e8a; color:#caf0f8; padding:10px; border-radius:10px; text-align:left;'>{alert_message}</pre>"

        result += "</div>"
        return result

    except Exception as e:
        return f"<p style='color:red;'>‚ùå Error occurred:<br>{str(e)}</p><pre>{traceback.format_exc()}</pre>"

# ------------------ Gradio Interface ------------------
with gr.Blocks(theme=gr.themes.Soft()) as app:
    gr.HTML("""
    <div style='text-align:center; padding:40px; font-family:Poppins;
                background:linear-gradient(180deg,#00b4d8,#48cae4,#90e0ef);
                border-radius:20px;'>
        <h1 style='color:white; font-size:42px; font-weight:800;
                   animation:float 3s ease-in-out infinite;'>üåä Aquasort</h1>
        <p style='color:#f1f1f1;'>Marine Waste Detection ‚Ä¢ Satellite Geo Logging ‚Ä¢ BOEM Alert System üåç</p>
    </div>
    <style>
        @keyframes float {
            0% {transform: translateY(0px);}
            50% {transform: translateY(-10px);}
            100% {transform: translateY(0px);}
        }
    </style>
    """)

    gr.Markdown("### üì∏ Upload Submarine or Drone Image for Smart Waste Analysis:")

    with gr.Row():
        img_input = gr.Image(type="pil", label="Upload Marine Image üåÖ")
        output_html = gr.HTML(label="üîç Analysis Report", value="<i>Awaiting image...</i>")

    analyze_btn = gr.Button("üöÄ Start Smart Detection", variant="primary")
    analyze_btn.click(analyze_waste, inputs=img_input, outputs=output_html)

    gr.Markdown("""
    ---
    <center>
        üåê <i>Future Features:</i> Real-time BOEM alert API ‚Ä¢ Satellite data auto-feed ‚Ä¢ Interactive marine pollution map
        üíô Developed by <b>Aquasort Research Team</b>
    </center>
    """)

print("‚úÖ Aquasort Web App is running...")
app.launch(share=True, debug=True)

!git clone https://github.com/Mage-1402/my-project.git

!cp /content/MyNotebook.ipynb /content/my-project/

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/my-project

!git config --global user.email "magesh2004sri@gmail.com"
!git config --global user.name "magesh sri a"

!git add .
!git commit -m "Added Colab notebook"

